name: Release

on:
  pull_request:
    # FIXME
    # types: [closed]
    # branches:
    #   - main

jobs:
  pre-release-checks:
    # FIXME
    # if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release') && github.event.pull_request.user.login == 'github-actions[bot]'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get new version
        id: version
        run: |
          NEW_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.workspace_members[0]' | cut -d '#' -f2)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check latest published version
        id: latest_version
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          LATEST_RELEASE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            jq -r .tag_name | sed 's/^v//')

          echo "Latest release: $LATEST_RELEASE"

          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          echo "New version: $NEW_VERSION"

          # Ensure the new version is greater than the latest published version
          if ! { [ "$(printf '%s\n' "$LATEST_RELEASE" "$NEW_VERSION" | sort -V | tail -n1)" = "$NEW_VERSION" ] && \
                 [ "$NEW_VERSION" != "$LATEST_RELEASE" ]; }; then
            echo "Error: New version ($NEW_VERSION) is not greater than latest release ($LATEST_RELEASE)"
            exit 1
          fi

  build-swift:
    runs-on: macos-latest
    needs: pre-release-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: ./.github/actions/rust-setup
        with:
          cache-prefix: "build-swift"

      - name: Build the project (iOS)
        run: ./build_swift.sh

      - name: Checkout swift repo
        uses: actions/checkout@v4
        with:
          repository: worldcoin/walletkit-swift
          token: ${{ secrets.WALLETKIT_BOT_TOKEN }}
          path: target-repo

      - name: Commit swift build
        env:
          GITHUB_TOKEN: ${{ secrets.WALLETKIT_BOT_TOKEN }}
        run: |
          cp -r WalletKitCore.xcframework target-repo/
          cp -r Sources/ target-repo/Sources
          cp Package.swift target-repo/
          echo "// Release version: ${{ needs.pre-release-checks.outputs.new_version }}" >> target-repo/Package.swift

          cd target-repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # TODO: Move away from Git LFS which doesn't work well with Swift Package Manager
          # Initialize Git LFS and track the large files
          git lfs install
          git lfs track "*.a"

          git add .
          git commit -m "Release ${{ needs.pre-release-checks.outputs.new_version }}"

          # Tag the release
          git tag ${{ needs.pre-release-checks.outputs.new_version }}
          git push
          git push origin ${{ needs.pre-release-checks.outputs.new_version }}

  prepare-kotlin:
    name: Prepare Kotlin
    runs-on: ubuntu-22.04-32core
    needs: [pre-release-checks]

    # Each target is built separately to run in parallel. Running sequentially takes vastly more time.
    strategy:
      fail-fast: true
      matrix:
        settings:
          - target: aarch64-linux-android
          - target: armv7-linux-androideabi
          - target: x86_64-linux-android
          - target: i686-linux-android

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: ./.github/actions/rust-setup
        with:
          cache-prefix: "prepare-kotlin-${{ matrix.settings.target }}"

      - name: Install Cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Build for target
        run: |
          CROSS_NO_WARNINGS=0 cross build -p walletkit --target ${{ matrix.settings.target }} --release --locked

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.settings.target }}
          path: ./target/${{ matrix.settings.target }}/release/libwalletkit.so
          if-no-files-found: error

  publish-kotlin:
    name: Publish Kotlin
    runs-on: ubuntu-latest
    needs: [pre-release-checks, prepare-kotlin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: ./.github/actions/rust-setup
        with:
          cache-prefix: "publish-kotlin"

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Move artifacts
        run: |
          mkdir -p kotlin/lib/src/main/jniLibs && cd kotlin/lib/src/main/jniLibs
          mkdir armeabi-v7a arm64-v8a x86 x86_64
          mv /home/runner/work/walletkit/walletkit/android-armv7-linux-androideabi/libwalletkit.so ./armeabi-v7a/libwalletkit.so
          mv /home/runner/work/walletkit/walletkit/android-aarch64-linux-android/libwalletkit.so ./arm64-v8a/libwalletkit.so
          mv /home/runner/work/walletkit/walletkit/android-i686-linux-android/libwalletkit.so ./x86/libwalletkit.so
          mv /home/runner/work/walletkit/walletkit/android-x86_64-linux-android/libwalletkit.so ./x86_64/libwalletkit.so

      - name: Generate bindings
        working-directory: kotlin
        run: cargo run -p uniffi-bindgen generate ./lib/src/main/jniLibs/arm64-v8a/libwalletkit.so --library --language kotlin --no-format --out-dir lib/src/main/java

      - name: Publish
        working-directory: kotlin
        run: ./gradlew lib:publish -PversionName=${{ needs.pre-release-checks.outputs.new_version }}
        env:
          GITHUB_ACTOR: wc-cicd
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-github-release:
    needs: [pre-release-checks, publish-kotlin, build-swift]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create Release in main repo
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.pre-release-checks.outputs.new_version }}
          tag_name: ${{ needs.pre-release-checks.outputs.new_version }}
          generate_release_notes: true
          make_latest: true

      - name: Create Release in swift repo
        uses: softprops/action-gh-release@v2
        with:
          repository: worldcoin/walletkit-swift
          token: ${{ secrets.WALLETKIT_BOT_TOKEN }}
          name: ${{ needs.pre-release-checks.outputs.new_version }}
          tag_name: ${{ needs.pre-release-checks.outputs.new_version }}
          body: |
            ## Version ${{ needs.pre-release-checks.outputs.new_version }}
            For full release notes, see the [main repo release](https://github.com/worldcoin/walletkit/releases/tag/${{ needs.pre-release-checks.outputs.new_version }}).
          make_latest: true

  publish-to-crates-io:
    needs: [create-github-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Rust
        run: |
          rustup update

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --token $CARGO_REGISTRY_TOKEN --package walletkit --locked
          cargo publish --token $CARGO_REGISTRY_TOKEN --package walletkit-core --locked
