name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  pre-release-checks:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release') && github.event.pull_request.user.login == 'github-actions[bot]'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get new version
        id: version
        run: |
          NEW_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.workspace_members[0]' | cut -d '#' -f2)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check latest published version
        id: latest_version
        run: |
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GIT_HUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            jq -r .tag_name | sed 's/^v//')

          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Ensure the new version is greater than the latest published version
          if ! { [ "$(printf '%s\n' "$LATEST_RELEASE" "$NEW_VERSION" | sort -V | tail -n1)" = "$NEW_VERSION" ] && \
                 [ "$NEW_VERSION" != "$LATEST_RELEASE" ]; }; then
            echo "Error: New version ($NEW_VERSION) is not greater than latest release ($LATEST_RELEASE)"
            exit 1
          fi

  build-swift:
    runs-on: macos-latest
    needs: pre-release-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        run: |
          rustup update

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Install dependencies
        run: |
          cargo fetch

      - name: Build the project (iOS)
        run: ./build_swift.sh

      - name: Checkout swift repo
        uses: actions/checkout@v4
        with:
          repository: worldcoin/walletkit-swift
          token: ${{ secrets.GIT_HUB_TOKEN }}
          path: target-repo

      - name: Commit swift build
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
        run: |
          cp -r WalletKitCore.xcframework target-repo/
          cp -r Sources/ target-repo/Sources
          cp Package.swift target-repo/
          cd target-repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Initialize Git LFS and track the large files
          git lfs install
          git lfs track "*.a"

          git add .
          git commit -m "Release ${{ needs.pre-release-checks.outputs.new_version }}"

          # Tag the release
          git tag ${{ needs.pre-release-checks.outputs.new_version }}
          git push
          git push origin ${{ needs.pre-release-checks.outputs.new_version }}

  create-github-release:
    needs: [pre-release-checks, build-swift]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create Release in main repo
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.pre-release-checks.outputs.new_version }}
          tag_name: ${{ needs.pre-release-checks.outputs.new_version }}
          generate_release_notes: true
          make_latest: true

      - name: Create Release in swift repo
        uses: softprops/action-gh-release@v2
        with:
          repository: worldcoin/walletkit-swift
          token: ${{ secrets.GIT_HUB_TOKEN }}
          name: ${{ needs.pre-release-checks.outputs.new_version }}
          tag_name: ${{ needs.pre-release-checks.outputs.new_version }}
          body: |
            ## Version ${{ needs.pre-release-checks.outputs.new_version }}
            For full release notes, see the [main repo release](https://github.com/worldcoin/walletkit/releases/tag/${{ needs.pre-release-checks.outputs.new_version }}).
          make_latest: true

  publish-to-crates-io:
    needs: [create-github-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Rust
        run: |
          rustup update

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --token $CARGO_REGISTRY_TOKEN --package walletkit --locked
          cargo publish --token $CARGO_REGISTRY_TOKEN --package walletkit-core --locked
